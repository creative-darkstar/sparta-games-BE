name: CD Pipeline

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  # 나중에 쓸 수 있음
  # ci:
  #   name: Run CI (PR only)
  #   if: github.event_name == 'pull_request'
  #   runs-on: ubuntu-latest

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v3

  #   - name: Set up Python
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: '3.10.12'

  #   - name: Install dependencies
  #     run: |
  #       python -m venv venv
  #       source venv/bin/activate
  #       pip install --upgrade pip
  #       pip install -r requirements.txt
  #       pip install flake8 black

  #   - name: Check black formatting
  #     run: |
  #       source venv/bin/activate
  #       black --check .

  #   - name: Run flake8 linter
  #     run: |
  #       source venv/bin/activate
  #       flake8 .

  #   - name: Check for missing migrations
  #     run: |
  #       source venv/bin/activate
  #       python manage.py makemigrations --check --dry-run

  cd:
    name: Deploy to EC2 (main push only)
    if: github.ref == 'refs/heads/main' && contains(fromJSON('["push", "pull_request"]'), github.event_name)
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_PEM }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to EC2
      run: |
        ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << EOF
          cd ${{ secrets.EC2_PROJECT_DIR }}
          git pull origin main
          source venv/bin/activate
          pip install -r requirements.txt
          python manage.py migrate --noinput
          python manage.py collectstatic --noinput
          supervisorctl restart all
          sudo systemctl restart gunicorn
          sudo systemctl restart nginx
        EOF

    - name: Notify to Discord
      if: success() || failure()
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_GIT_DEPLOY_URL }}
      run: |
        STATUS="${{ job.status }}"
        COLOR="3066993"  # 성공: 파랑
        ICON="✅"
        if [ "$STATUS" != "success" ]; then
          COLOR="15158332"  # 실패: 빨강
          ICON="❌"
        fi

        DEPLOY_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        ACTOR="${{ github.actor }}"
        BRANCH="${GITHUB_REF#refs/heads/}"
        REPO="${{ github.repository }}"
        COMMIT_SHA="${{ github.sha }}"
        COMMIT_MSG="${{ github.event.head_commit.message }}"
        SHORT_SHA=$(echo "$COMMIT_SHA" | cut -c1-7)

        curl -H "Content-Type: application/json" \
            -X POST \
            -d "{
              \"embeds\": [{
                \"title\": \"$ICON CD 배포 결과 ($STATUS)\",
                \"description\": \"**[$REPO]** 브랜치 \`$BRANCH\` 에 배포되었습니다.\",
                \"color\": $COLOR,
                \"fields\": [
                  {
                    \"name\": \"👤 배포자\",
                    \"value\": \"$ACTOR\",
                    \"inline\": true
                  },
                  {
                    \"name\": \"🕒 배포 시간 (UTC)\",
                    \"value\": \"$DEPLOY_TIME\",
                    \"inline\": true
                  },
                  {
                    \"name\": \"💬 커밋 메시지\",
                    \"value\": \"$COMMIT_MSG\"
                  },
                  {
                    \"name\": \"🔗 커밋 링크\",
                    \"value\": \"https://github.com/$REPO/commit/$COMMIT_SHA\"
                  }
                ],
                \"timestamp\": \"$DEPLOY_TIME\"
              }]
            }" \
            "$DISCORD_WEBHOOK_URL"
